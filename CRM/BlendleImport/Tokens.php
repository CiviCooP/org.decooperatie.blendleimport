<?php

/**
 * Class CRM_BlendleImport_Tokens.
 * Mailing tokens for activities/contributions generated by this extension.
 * First working version.
 *
 * @author Kevin Levie <kevin.levie@civicoop.org>
 * @package org.decooperatie.blendleimport
 * @license AGPL-3.0
 */
class CRM_BlendleImport_Tokens {

  /**
   * Register tokens.
   * @param array $tokens
   */
  public static function addTokens(&$tokens) {

    // Get import jobs based on unique import job ids linked to contributions
    // (Hardcoded table/column names... but we're copying this from the report and they should always be the same since they're listed in custom_groups.json)

    $jobQuery = CRM_Core_DAO::executeQuery("SELECT DISTINCT import_job_id_68 FROM civicrm_value_blendle_import_contributions__12 GROUP BY import_job_id_68");
    $jobIds = [];
    while($jobQuery->fetch()) {
      $jobIds[] = $jobQuery->import_job_id_68;
    }

    if(!isset($tokens['blendleimport'])) {
      $tokens['blendleimport'] = [];
    }

    foreach($jobIds as $jobId) {
      $tokens['blendleimport']['blendleimport.job_' . $jobId] = ts('Blendle Revenue Data (#%1)', [1 => $jobId]);
    }
  }

  /**
   * Return data for these tokens.
   * @param array $values
   * @param array $cids
   * @param array $tokens
   */
  public static function addTokenValues(&$values, $cids, $tokens = []) {

    if (!empty($tokens['blendleimport'])) {
      foreach($tokens['blendleimport'] as $k => $i) {
        $key = is_int($i) ? $k : $i;
        if(preg_match('/job_([0-9]+)/', $key, $matches)) {

          $jobId = $matches[1];
          $smarty = CRM_Core_Smarty::singleton();

          // Get data for this job id
          $contributions = CRM_Core_DAO::executeQuery("
        SELECT co.id, co.contact_id, co.total_amount, co.fee_amount, co.net_amount, co.receive_date, cobl.import_job_id_68 AS import_job_id, coac.subject AS contribution_subject
        FROM civicrm_contribution co
        LEFT JOIN civicrm_value_blendle_import_contributions__12 cobl ON co.id = cobl.entity_id
        LEFT JOIN civicrm_activity coac ON co.id = coac.source_record_id AND coac.activity_type_id = 6
        WHERE cobl.import_job_id_68 = %1
        ", [1 => [$jobId, 'Integer']]);
          $activities = CRM_Core_DAO::executeQuery("
          SELECT abl.import_job_id_55 AS import_job_id, a.id AS activity_id, ac.contact_id AS contact_id, a.activity_date_time AS activity_date, abl.product_uid_56 AS activity_product_uid, abl.article_title_57 AS activity_article_title, abl.author_77 AS activity_author, abl.sales_count_58 AS activity_sales_count, abl.premium_reads_59 AS activity_premium_reads, abl.refunded_count_60 AS activity_refunded_count, abl.refunded_amount_61 AS activity_refunded_amount, abl.vmoney_amount_62 AS activity_vmoney_amount, abl.sales_amount_63 AS activity_sales_amount, abl.revenue_64 AS activity_revenue, abl.price_65 AS activity_article_price, abl.fbcosts_68 AS activity_fb_costs, abl.premium_revenue_79 AS activity_premium_revenue, abl.matching_revenue_80 AS activity_matching_revenue
          FROM civicrm_value_blendle_import_11 abl
      LEFT JOIN civicrm_activity a ON abl.entity_id = a.id
      LEFT JOIN civicrm_activity_contact ac ON a.id = ac.activity_id AND ac.record_type_id = 3
      WHERE abl.import_job_id_55 = %1
          ", [1 => [$jobId, 'Integer']]);

          // Add data to array with contact id as key
          $data = [];
          while($contributions->fetch()) {
            $data[$contributions->contact_id] = $contributions->toArray();
            $data[$contributions->contact_id]['total_formatted'] = number_format(abs($contributions->total_amount), 2, '.', '');
            $data[$contributions->contact_id]['activities'] = [];
          }
          while($activities->fetch()) {
            if(!is_array($data[$activities->contact_id])) {
              continue;
            }
            $data[$activities->contact_id]['activities'][] = $activities->toArray();
          }

          // Walk through $cids and add template block for each contact
          foreach($cids as $cid) {
            if(isset($data[$cid])) {
              $content = $smarty->fetchWith('CRM/BlendleImport/Mail/MailBlock.tpl', [
                'data' => $data[$cid],
              ]);
            } else {
              $content = "[Error: geen data aanwezig voor dit contact!]";
            }

            $values[$cid]['blendleimport.'.$key] = $content;
          }
        }
      }
    }
  }

}